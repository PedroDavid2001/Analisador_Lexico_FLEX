
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\005\005\000\002\006\005" +
    "\000\002\006\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\006\000\002\010" +
    "\005\000\002\011\005\000\002\011\002\000\002\012\004" +
    "\000\002\012\004\000\002\013\004\000\002\013\006\000" +
    "\002\014\004\000\002\015\005\000\002\015\002\000\002" +
    "\016\007\000\002\017\004\000\002\020\005\000\002\020" +
    "\002\000\002\021\005\000\002\022\004\000\002\023\005" +
    "\000\002\023\002\000\002\024\003\000\002\024\003\000" +
    "\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\010\034\005\035\006\036\007\001\002\000" +
    "\004\030\012\001\002\000\010\014\uffe0\024\uffe0\030\uffe0" +
    "\001\002\000\010\014\uffdf\024\uffdf\030\uffdf\001\002\000" +
    "\010\014\uffde\024\uffde\030\uffde\001\002\000\004\002\011" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufffe\014" +
    "\013\001\002\000\004\023\020\001\002\000\004\030\016" +
    "\001\002\000\004\002\001\001\002\000\006\002\ufffe\014" +
    "\013\001\002\000\004\002\uffff\001\002\000\006\031\021" +
    "\032\023\001\002\000\012\004\027\007\026\010\030\011" +
    "\025\001\002\000\006\024\ufffd\030\ufffd\001\002\000\012" +
    "\004\027\007\026\010\030\011\025\001\002\000\004\024" +
    "\047\001\002\000\004\033\045\001\002\000\004\033\043" +
    "\001\002\000\016\023\034\034\005\035\006\036\007\037" +
    "\036\040\035\001\002\000\004\033\031\001\002\000\016" +
    "\023\034\034\005\035\006\036\007\037\036\040\035\001" +
    "\002\000\004\024\ufff6\001\002\000\004\024\ufff8\001\002" +
    "\000\010\034\005\035\006\036\007\001\002\000\004\024" +
    "\ufff4\001\002\000\004\024\ufff5\001\002\000\004\014\013" +
    "\001\002\000\004\024\041\001\002\000\004\024\ufff3\001" +
    "\002\000\004\024\ufffa\001\002\000\016\023\034\034\005" +
    "\035\006\036\007\037\036\040\035\001\002\000\004\024" +
    "\ufff9\001\002\000\016\023\034\034\005\035\006\036\007" +
    "\037\036\040\035\001\002\000\004\024\ufff7\001\002\000" +
    "\006\024\ufffb\030\ufffb\001\002\000\004\024\051\001\002" +
    "\000\006\024\ufffc\030\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\002\007\024\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\014\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\016\005\013\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\004\004\047\001\001" +
    "\000\002\001\001\000\004\004\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\041" +
    "\024\031\001\001\000\002\001\001\000\006\007\032\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\043\024\031\001\001\000" +
    "\002\001\001\000\006\007\045\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // definida ::= nome_classe NOVALINHA cl_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definida",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= definida EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cl_def ::= linha_def NOVALINHA cl_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cl_def ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linha_def ::= AND ABREPAR fat_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linha_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fat_def ::= HAS desc_def FECHAPAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fat_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fat_def ::= IS desc_def FECHAPAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fat_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // desc_def ::= SOME final_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("desc_def",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // desc_def ::= MIN NUMERO final_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("desc_def",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // desc_def ::= MAX NUMERO final_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("desc_def",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // desc_def ::= EXACTLY NUMERO final_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("desc_def",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // final_def ::= nome_classe 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_def",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // final_def ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_def",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // final_def ::= FLOAT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_def",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // final_def ::= ABREPAR nome_classe linha_def FECHAPAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_def",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // primitiva ::= nome_classe NOVALINHA cl_pri 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiva",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cl_pri ::= linha_pri NOVALINHA cl_pri 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl_pri",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cl_pri ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl_pri",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // linha_pri ::= HAS desc_pri 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linha_pri",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // linha_pri ::= IS desc_pri 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linha_pri",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // desc_pri ::= SOME nome_classe 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("desc_pri",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // desc_pri ::= ONLY ABREPAR final_pri FECHAPAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("desc_pri",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // final_pri ::= nome_classe r_pri 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_pri",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // r_pri ::= OR nome_classe r_pri 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_pri",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // r_pri ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_pri",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // enumerada ::= nome_classe NOVALINHA ABRECHAVE linha_enu FECHACHAVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumerada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // linha_enu ::= nome_classe r_enu 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linha_enu",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // r_enu ::= VIRGULA nome_classe r_enu 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_enu",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // r_enu ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_enu",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // coberta ::= nome_classe NOVALINHA linha_cob 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coberta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linha_cob ::= nome_classe r_cob 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linha_cob",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // r_cob ::= OR nome_classe r_cob 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_cob",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // r_cob ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_cob",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nome_classe ::= CLASSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nome_classe",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nome_classe ::= CLASSECOMP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nome_classe",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nome_classe ::= CLASSEUNDER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nome_classe",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
